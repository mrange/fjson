<#@ include file="CSharpHeader.ttinclude" #>

#pragma warning disable 0162
// ReSharper disable CheckNamespace
// ReSharper disable CSharpWarnings::CS0162
// ReSharper disable HeuristicUnreachableCode
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart

<#
    
    var defaultState = model
        .FirstOrDefault (ps => ps.IsDefault) ?? new ParserState ("<DefaultState>", isDefault:true);
#>

namespace M3.JSON.Generator.Parser
{
    using System.Collections.Generic;
    using M3.JSON.Generator.Source.Common;


    enum ParserState
    {
<#
    foreach (var parserState in model)
    {
#>
        <#=parserState.Name#>,
<#
    }
#>
    }

    enum ParserResult
    {
        Error   ,
        Continue,
        Done    ,
    }


    sealed partial class Scanner
    {
        partial void BeginAcceptValue ();
        partial void EndAcceptValue ();

<#
    foreach (var parserState in model)
    {
        foreach (var nextParserState in parserState.ChoiceStates(defaultState))
        {
#>
        partial void Partial_StateChoice__From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#> ();
<#
        }
    }
#>

<#
    foreach (var parserState in model)
    {
#>
        partial void Partial_StateTransition__From_<#=parserState.Name#> ();

        partial void Partial_StateTransition__To_<#=parserState.Name#> ();

<#
        foreach (var name in parserState.AllStates(defaultState).SelectMany (nps => nps.Names))
        {
#>
        partial void Partial_StateTransition__From_<#=parserState.Name#>__To_<#=name#> ();
<#
        }
    }
#>

        Stack<ParserState> ResumeWith   = new Stack<ParserState> (64);
        ParserState State               = default (ParserState);

        ParserResult Result             ;
        SubString    CurrentLine        ;
        int          CurrentPos         ;
        char         CurrentCharacter   ;


        public bool AcceptValue (SubString ss)
        {
            Result      = ParserResult.Continue;
            CurrentLine = ss;

            BeginAcceptValue ();            

            var bs      = ss.BaseString;
            var begin   = ss.Begin;
            var end     = ss.End;

            for (CurrentPos = begin; CurrentPos < end; ++CurrentPos)
            {
                CurrentCharacter = bs[CurrentPos];
apply:
                if (Result != ParserResult.Continue)
                {
                    break;
                }

                switch (State)
                {
<#
    foreach (var parserState in model)
    {
#>
                case ParserState.<#=parserState.Name#>:
<#
    if (parserState.HasResume)
    {
#>
                    ResumeWith.Push (ParserState.<#=parserState.ResumeWith#>);
<#
    }
#>
                    switch (CurrentCharacter)
                    {
<#
    foreach (var nextParserState in parserState.NextStates (defaultState))
    {
        if (nextParserState.IsDefaultCase)
        {
#>
                    default:
<#
        }
        else
        {
            foreach (var ch in nextParserState.Characters)
            {
#>
                    case <#=GetCase(ch)#>:
<#
            }
        }
        if (nextParserState.Resume)
        {
#>
                        State = ResumeWith.Pop (); 
<#
        }
        else if (nextParserState.IsChoice)
        {
            OutputStateChoice (parserState, nextParserState);
#>

                        switch (State)
                        {
<#
        foreach (var name in nextParserState.Names)
        {
#>
                        case ParserState.<#=name#>:
<#
                        OutputStateTransition (parserState, name);
#>
                            break;
<#
        }
#>
                        default:
                            Result = ParserResult.Error;
                            break;
                    }
<#
        }
        else
        {
            var name = nextParserState.Names[0]; 
            if (name != parserState.Name)
            {
#>
                        State = ParserState.<#=name#>; 
<#
            }
            OutputStateTransition (parserState, name);
        }
    if (nextParserState.HandOver)
    {
#>
                        goto apply;
<#
    }
#>
                        break;
<#
    }
#>    
                    }
                    break;
<#
    }
#>
                default:
                    Result = ParserResult.Error;
                    break;
                }
            }

            EndAcceptValue ();            

            return Result != ParserResult.Error;
        }
    }
}


<#@ include file="ParserGenerator.ttinclude"#>

<#+
    void OutputStateChoice (ParserState parserState, NextParserState nextParserState)
    {
#>
                    Partial_StateChoice__From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#> ();
<#+
    }
#>

<#+
    void OutputStateTransition (ParserState parserState, string to)
    {
#>
                            Partial_StateTransition__From_<#=parserState.Name#> ();
                            Partial_StateTransition__From_<#=parserState.Name#>__To_<#=to#> ();
                            Partial_StateTransition__To_<#=to#> ();
<#+
    }
#>
